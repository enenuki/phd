/*   1:    */ package org.hibernate.engine.jdbc.internal;
/*   2:    */ 
/*   3:    */ import java.sql.Connection;
/*   4:    */ import java.sql.PreparedStatement;
/*   5:    */ import java.sql.SQLException;
/*   6:    */ import org.hibernate.AssertionFailure;
/*   7:    */ import org.hibernate.ScrollMode;
/*   8:    */ import org.hibernate.cfg.Settings;
/*   9:    */ import org.hibernate.engine.jdbc.spi.JdbcResourceRegistry;
/*  10:    */ import org.hibernate.engine.jdbc.spi.JdbcServices;
/*  11:    */ import org.hibernate.engine.jdbc.spi.LogicalConnectionImplementor;
/*  12:    */ import org.hibernate.engine.jdbc.spi.SqlExceptionHelper;
/*  13:    */ import org.hibernate.engine.jdbc.spi.StatementPreparer;
/*  14:    */ import org.hibernate.engine.spi.SessionFactoryImplementor;
/*  15:    */ import org.hibernate.engine.transaction.spi.TransactionContext;
/*  16:    */ import org.hibernate.engine.transaction.spi.TransactionCoordinator;
/*  17:    */ import org.hibernate.engine.transaction.spi.TransactionEnvironment;
/*  18:    */ 
/*  19:    */ class StatementPreparerImpl
/*  20:    */   implements StatementPreparer
/*  21:    */ {
/*  22:    */   private JdbcCoordinatorImpl jdbcCoordinator;
/*  23:    */   
/*  24:    */   StatementPreparerImpl(JdbcCoordinatorImpl jdbcCoordinator)
/*  25:    */   {
/*  26: 46 */     this.jdbcCoordinator = jdbcCoordinator;
/*  27:    */   }
/*  28:    */   
/*  29:    */   protected final Settings settings()
/*  30:    */   {
/*  31: 50 */     return this.jdbcCoordinator.sessionFactory().getSettings();
/*  32:    */   }
/*  33:    */   
/*  34:    */   protected final Connection connectionProxy()
/*  35:    */   {
/*  36: 54 */     return logicalConnection().getShareableConnectionProxy();
/*  37:    */   }
/*  38:    */   
/*  39:    */   protected final LogicalConnectionImplementor logicalConnection()
/*  40:    */   {
/*  41: 58 */     return this.jdbcCoordinator.getLogicalConnection();
/*  42:    */   }
/*  43:    */   
/*  44:    */   protected final SqlExceptionHelper sqlExceptionHelper()
/*  45:    */   {
/*  46: 62 */     return this.jdbcCoordinator.getTransactionCoordinator().getTransactionContext().getTransactionEnvironment().getJdbcServices().getSqlExceptionHelper();
/*  47:    */   }
/*  48:    */   
/*  49:    */   public PreparedStatement prepareStatement(String sql)
/*  50:    */   {
/*  51: 71 */     return buildPreparedStatementPreparationTemplate(sql, false).prepareStatement();
/*  52:    */   }
/*  53:    */   
/*  54:    */   public PreparedStatement prepareStatement(String sql, boolean isCallable)
/*  55:    */   {
/*  56: 76 */     this.jdbcCoordinator.executeBatch();
/*  57: 77 */     return buildPreparedStatementPreparationTemplate(sql, isCallable).prepareStatement();
/*  58:    */   }
/*  59:    */   
/*  60:    */   private StatementPreparationTemplate buildPreparedStatementPreparationTemplate(String sql, final boolean isCallable)
/*  61:    */   {
/*  62: 81 */     new StatementPreparationTemplate(sql, isCallable)
/*  63:    */     {
/*  64:    */       protected PreparedStatement doPrepare()
/*  65:    */         throws SQLException
/*  66:    */       {
/*  67: 84 */         return isCallable ? StatementPreparerImpl.this.connectionProxy().prepareCall(this.sql) : StatementPreparerImpl.this.connectionProxy().prepareStatement(this.sql);
/*  68:    */       }
/*  69:    */     };
/*  70:    */   }
/*  71:    */   
/*  72:    */   private void checkAutoGeneratedKeysSupportEnabled()
/*  73:    */   {
/*  74: 92 */     if (!settings().isGetGeneratedKeysEnabled()) {
/*  75: 93 */       throw new AssertionFailure("getGeneratedKeys() support is not enabled");
/*  76:    */     }
/*  77:    */   }
/*  78:    */   
/*  79:    */   public PreparedStatement prepareStatement(String sql, final int autoGeneratedKeys)
/*  80:    */   {
/*  81: 99 */     if (autoGeneratedKeys == 1) {
/*  82:100 */       checkAutoGeneratedKeysSupportEnabled();
/*  83:    */     }
/*  84:102 */     this.jdbcCoordinator.executeBatch();
/*  85:103 */     new StatementPreparationTemplate(sql, autoGeneratedKeys)
/*  86:    */     {
/*  87:    */       public PreparedStatement doPrepare()
/*  88:    */         throws SQLException
/*  89:    */       {
/*  90:105 */         return StatementPreparerImpl.this.connectionProxy().prepareStatement(this.sql, autoGeneratedKeys);
/*  91:    */       }
/*  92:    */     }.prepareStatement();
/*  93:    */   }
/*  94:    */   
/*  95:    */   public PreparedStatement prepareStatement(String sql, final String[] columnNames)
/*  96:    */   {
/*  97:112 */     checkAutoGeneratedKeysSupportEnabled();
/*  98:113 */     this.jdbcCoordinator.executeBatch();
/*  99:114 */     new StatementPreparationTemplate(sql, columnNames)
/* 100:    */     {
/* 101:    */       public PreparedStatement doPrepare()
/* 102:    */         throws SQLException
/* 103:    */       {
/* 104:116 */         return StatementPreparerImpl.this.connectionProxy().prepareStatement(this.sql, columnNames);
/* 105:    */       }
/* 106:    */     }.prepareStatement();
/* 107:    */   }
/* 108:    */   
/* 109:    */   public PreparedStatement prepareQueryStatement(String sql, final boolean isCallable, final ScrollMode scrollMode)
/* 110:    */   {
/* 111:126 */     if ((scrollMode != null) && (!scrollMode.equals(ScrollMode.FORWARD_ONLY)))
/* 112:    */     {
/* 113:127 */       if (!settings().isScrollableResultSetsEnabled()) {
/* 114:128 */         throw new AssertionFailure("scrollable result sets are not enabled");
/* 115:    */       }
/* 116:130 */       PreparedStatement ps = new QueryStatementPreparationTemplate(sql, isCallable)
/* 117:    */       {
/* 118:    */         public PreparedStatement doPrepare()
/* 119:    */           throws SQLException
/* 120:    */         {
/* 121:132 */           return isCallable ? StatementPreparerImpl.this.connectionProxy().prepareCall(this.sql, scrollMode.toResultSetType(), 1007) : StatementPreparerImpl.this.connectionProxy().prepareStatement(this.sql, scrollMode.toResultSetType(), 1007);
/* 122:    */         }
/* 123:140 */       }.prepareStatement();
/* 124:141 */       logicalConnection().getResourceRegistry().registerLastQuery(ps);
/* 125:142 */       return ps;
/* 126:    */     }
/* 127:145 */     PreparedStatement ps = new QueryStatementPreparationTemplate(sql, isCallable)
/* 128:    */     {
/* 129:    */       public PreparedStatement doPrepare()
/* 130:    */         throws SQLException
/* 131:    */       {
/* 132:147 */         return isCallable ? StatementPreparerImpl.this.connectionProxy().prepareCall(this.sql) : StatementPreparerImpl.this.connectionProxy().prepareStatement(this.sql);
/* 133:    */       }
/* 134:151 */     }.prepareStatement();
/* 135:152 */     logicalConnection().getResourceRegistry().registerLastQuery(ps);
/* 136:153 */     return ps;
/* 137:    */   }
/* 138:    */   
/* 139:    */   private abstract class StatementPreparationTemplate
/* 140:    */   {
/* 141:    */     protected final String sql;
/* 142:    */     
/* 143:    */     protected StatementPreparationTemplate(String sql)
/* 144:    */     {
/* 145:161 */       this.sql = StatementPreparerImpl.this.jdbcCoordinator.getTransactionCoordinator().getTransactionContext().onPrepareStatement(sql);
/* 146:    */     }
/* 147:    */     
/* 148:    */     public PreparedStatement prepareStatement()
/* 149:    */     {
/* 150:    */       try
/* 151:    */       {
/* 152:166 */         PreparedStatement preparedStatement = doPrepare();
/* 153:167 */         setStatementTimeout(preparedStatement);
/* 154:168 */         postProcess(preparedStatement);
/* 155:169 */         return preparedStatement;
/* 156:    */       }
/* 157:    */       catch (SQLException e)
/* 158:    */       {
/* 159:172 */         throw StatementPreparerImpl.this.sqlExceptionHelper().convert(e, "could not prepare statement", this.sql);
/* 160:    */       }
/* 161:    */     }
/* 162:    */     
/* 163:    */     protected abstract PreparedStatement doPrepare()
/* 164:    */       throws SQLException;
/* 165:    */     
/* 166:    */     public void postProcess(PreparedStatement preparedStatement)
/* 167:    */       throws SQLException
/* 168:    */     {}
/* 169:    */     
/* 170:    */     private void setStatementTimeout(PreparedStatement preparedStatement)
/* 171:    */       throws SQLException
/* 172:    */     {
/* 173:182 */       int remainingTransactionTimeOutPeriod = StatementPreparerImpl.this.jdbcCoordinator.determineRemainingTransactionTimeOutPeriod();
/* 174:183 */       if (remainingTransactionTimeOutPeriod > 0) {
/* 175:184 */         preparedStatement.setQueryTimeout(remainingTransactionTimeOutPeriod);
/* 176:    */       }
/* 177:    */     }
/* 178:    */   }
/* 179:    */   
/* 180:    */   private abstract class QueryStatementPreparationTemplate
/* 181:    */     extends StatementPreparerImpl.StatementPreparationTemplate
/* 182:    */   {
/* 183:    */     protected QueryStatementPreparationTemplate(String sql)
/* 184:    */     {
/* 185:191 */       super(sql);
/* 186:    */     }
/* 187:    */     
/* 188:    */     public void postProcess(PreparedStatement preparedStatement)
/* 189:    */       throws SQLException
/* 190:    */     {
/* 191:195 */       super.postProcess(preparedStatement);
/* 192:196 */       StatementPreparerImpl.this.setStatementFetchSize(preparedStatement);
/* 193:    */     }
/* 194:    */   }
/* 195:    */   
/* 196:    */   private void setStatementFetchSize(PreparedStatement statement)
/* 197:    */     throws SQLException
/* 198:    */   {
/* 199:201 */     if (settings().getJdbcFetchSize() != null) {
/* 200:202 */       statement.setFetchSize(settings().getJdbcFetchSize().intValue());
/* 201:    */     }
/* 202:    */   }
/* 203:    */ }


/* Location:           G:\ParasiteTrade\Parasite_20150226.jar
 * Qualified Name:     org.hibernate.engine.jdbc.internal.StatementPreparerImpl
 * JD-Core Version:    0.7.0.1
 */