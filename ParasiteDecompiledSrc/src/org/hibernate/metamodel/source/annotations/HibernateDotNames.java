/*   1:    */ package org.hibernate.metamodel.source.annotations;
/*   2:    */ 
/*   3:    */ import org.hibernate.annotations.AccessType;
/*   4:    */ import org.hibernate.annotations.Any;
/*   5:    */ import org.hibernate.annotations.AnyMetaDef;
/*   6:    */ import org.hibernate.annotations.AnyMetaDefs;
/*   7:    */ import org.hibernate.annotations.BatchSize;
/*   8:    */ import org.hibernate.annotations.Cache;
/*   9:    */ import org.hibernate.annotations.Cascade;
/*  10:    */ import org.hibernate.annotations.Check;
/*  11:    */ import org.hibernate.annotations.CollectionId;
/*  12:    */ import org.hibernate.annotations.ColumnTransformer;
/*  13:    */ import org.hibernate.annotations.ColumnTransformers;
/*  14:    */ import org.hibernate.annotations.Columns;
/*  15:    */ import org.hibernate.annotations.DiscriminatorFormula;
/*  16:    */ import org.hibernate.annotations.DiscriminatorOptions;
/*  17:    */ import org.hibernate.annotations.Entity;
/*  18:    */ import org.hibernate.annotations.Fetch;
/*  19:    */ import org.hibernate.annotations.FetchProfile;
/*  20:    */ import org.hibernate.annotations.FetchProfiles;
/*  21:    */ import org.hibernate.annotations.Filter;
/*  22:    */ import org.hibernate.annotations.FilterDef;
/*  23:    */ import org.hibernate.annotations.FilterDefs;
/*  24:    */ import org.hibernate.annotations.FilterJoinTable;
/*  25:    */ import org.hibernate.annotations.FilterJoinTables;
/*  26:    */ import org.hibernate.annotations.Filters;
/*  27:    */ import org.hibernate.annotations.ForeignKey;
/*  28:    */ import org.hibernate.annotations.Formula;
/*  29:    */ import org.hibernate.annotations.Generated;
/*  30:    */ import org.hibernate.annotations.GenericGenerator;
/*  31:    */ import org.hibernate.annotations.GenericGenerators;
/*  32:    */ import org.hibernate.annotations.Immutable;
/*  33:    */ import org.hibernate.annotations.Index;
/*  34:    */ import org.hibernate.annotations.IndexColumn;
/*  35:    */ import org.hibernate.annotations.JoinColumnOrFormula;
/*  36:    */ import org.hibernate.annotations.JoinColumnsOrFormulas;
/*  37:    */ import org.hibernate.annotations.JoinFormula;
/*  38:    */ import org.hibernate.annotations.LazyCollection;
/*  39:    */ import org.hibernate.annotations.LazyToOne;
/*  40:    */ import org.hibernate.annotations.Loader;
/*  41:    */ import org.hibernate.annotations.ManyToAny;
/*  42:    */ import org.hibernate.annotations.MapKeyType;
/*  43:    */ import org.hibernate.annotations.MetaValue;
/*  44:    */ import org.hibernate.annotations.NamedNativeQueries;
/*  45:    */ import org.hibernate.annotations.NamedNativeQuery;
/*  46:    */ import org.hibernate.annotations.NamedQueries;
/*  47:    */ import org.hibernate.annotations.NamedQuery;
/*  48:    */ import org.hibernate.annotations.NaturalId;
/*  49:    */ import org.hibernate.annotations.NotFound;
/*  50:    */ import org.hibernate.annotations.OnDelete;
/*  51:    */ import org.hibernate.annotations.OptimisticLock;
/*  52:    */ import org.hibernate.annotations.OrderBy;
/*  53:    */ import org.hibernate.annotations.ParamDef;
/*  54:    */ import org.hibernate.annotations.Parameter;
/*  55:    */ import org.hibernate.annotations.Parent;
/*  56:    */ import org.hibernate.annotations.Persister;
/*  57:    */ import org.hibernate.annotations.Proxy;
/*  58:    */ import org.hibernate.annotations.RowId;
/*  59:    */ import org.hibernate.annotations.SQLDelete;
/*  60:    */ import org.hibernate.annotations.SQLDeleteAll;
/*  61:    */ import org.hibernate.annotations.SQLInsert;
/*  62:    */ import org.hibernate.annotations.SQLUpdate;
/*  63:    */ import org.hibernate.annotations.Sort;
/*  64:    */ import org.hibernate.annotations.Source;
/*  65:    */ import org.hibernate.annotations.Subselect;
/*  66:    */ import org.hibernate.annotations.Synchronize;
/*  67:    */ import org.hibernate.annotations.Table;
/*  68:    */ import org.hibernate.annotations.Tables;
/*  69:    */ import org.hibernate.annotations.Target;
/*  70:    */ import org.hibernate.annotations.Tuplizer;
/*  71:    */ import org.hibernate.annotations.Tuplizers;
/*  72:    */ import org.hibernate.annotations.Type;
/*  73:    */ import org.hibernate.annotations.TypeDef;
/*  74:    */ import org.hibernate.annotations.TypeDefs;
/*  75:    */ import org.hibernate.annotations.Where;
/*  76:    */ import org.hibernate.annotations.WhereJoinTable;
/*  77:    */ import org.jboss.jandex.DotName;
/*  78:    */ 
/*  79:    */ public abstract interface HibernateDotNames
/*  80:    */ {
/*  81:109 */   public static final DotName ACCESS_TYPE = DotName.createSimple(AccessType.class.getName());
/*  82:110 */   public static final DotName ANY = DotName.createSimple(Any.class.getName());
/*  83:111 */   public static final DotName ANY_META_DEF = DotName.createSimple(AnyMetaDef.class.getName());
/*  84:112 */   public static final DotName ANY_META_DEFS = DotName.createSimple(AnyMetaDefs.class.getName());
/*  85:113 */   public static final DotName BATCH_SIZE = DotName.createSimple(BatchSize.class.getName());
/*  86:114 */   public static final DotName CACHE = DotName.createSimple(Cache.class.getName());
/*  87:115 */   public static final DotName CASCADE = DotName.createSimple(Cascade.class.getName());
/*  88:116 */   public static final DotName CHECK = DotName.createSimple(Check.class.getName());
/*  89:117 */   public static final DotName COLLECTION_ID = DotName.createSimple(CollectionId.class.getName());
/*  90:118 */   public static final DotName COLUMNS = DotName.createSimple(Columns.class.getName());
/*  91:119 */   public static final DotName COLUMN_TRANSFORMER = DotName.createSimple(ColumnTransformer.class.getName());
/*  92:120 */   public static final DotName COLUMN_TRANSFORMERS = DotName.createSimple(ColumnTransformers.class.getName());
/*  93:121 */   public static final DotName DISCRIMINATOR_FORMULA = DotName.createSimple(DiscriminatorFormula.class.getName());
/*  94:122 */   public static final DotName DISCRIMINATOR_OPTIONS = DotName.createSimple(DiscriminatorOptions.class.getName());
/*  95:123 */   public static final DotName ENTITY = DotName.createSimple(Entity.class.getName());
/*  96:124 */   public static final DotName FETCH = DotName.createSimple(Fetch.class.getName());
/*  97:125 */   public static final DotName FETCH_PROFILE = DotName.createSimple(FetchProfile.class.getName());
/*  98:126 */   public static final DotName FETCH_PROFILES = DotName.createSimple(FetchProfiles.class.getName());
/*  99:127 */   public static final DotName FILTER = DotName.createSimple(Filter.class.getName());
/* 100:128 */   public static final DotName FILTER_DEF = DotName.createSimple(FilterDef.class.getName());
/* 101:129 */   public static final DotName FILTER_DEFS = DotName.createSimple(FilterDefs.class.getName());
/* 102:130 */   public static final DotName FILTER_JOIN_TABLE = DotName.createSimple(FilterJoinTable.class.getName());
/* 103:131 */   public static final DotName FILTER_JOIN_TABLES = DotName.createSimple(FilterJoinTables.class.getName());
/* 104:132 */   public static final DotName FILTERS = DotName.createSimple(Filters.class.getName());
/* 105:133 */   public static final DotName FOREIGN_KEY = DotName.createSimple(ForeignKey.class.getName());
/* 106:134 */   public static final DotName FORMULA = DotName.createSimple(Formula.class.getName());
/* 107:135 */   public static final DotName GENERATED = DotName.createSimple(Generated.class.getName());
/* 108:136 */   public static final DotName GENERIC_GENERATOR = DotName.createSimple(GenericGenerator.class.getName());
/* 109:137 */   public static final DotName GENERIC_GENERATORS = DotName.createSimple(GenericGenerators.class.getName());
/* 110:138 */   public static final DotName IMMUTABLE = DotName.createSimple(Immutable.class.getName());
/* 111:139 */   public static final DotName INDEX = DotName.createSimple(Index.class.getName());
/* 112:140 */   public static final DotName INDEX_COLUMN = DotName.createSimple(IndexColumn.class.getName());
/* 113:141 */   public static final DotName JOIN_COLUMN_OR_FORMULA = DotName.createSimple(JoinColumnOrFormula.class.getName());
/* 114:142 */   public static final DotName JOIN_COLUMNS_OR_FORMULAS = DotName.createSimple(JoinColumnsOrFormulas.class.getName());
/* 115:143 */   public static final DotName JOIN_FORMULA = DotName.createSimple(JoinFormula.class.getName());
/* 116:144 */   public static final DotName LAZY_COLLECTION = DotName.createSimple(LazyCollection.class.getName());
/* 117:145 */   public static final DotName LAZY_TO_ONE = DotName.createSimple(LazyToOne.class.getName());
/* 118:146 */   public static final DotName LOADER = DotName.createSimple(Loader.class.getName());
/* 119:147 */   public static final DotName MANY_TO_ANY = DotName.createSimple(ManyToAny.class.getName());
/* 120:148 */   public static final DotName MAP_KEY_TYPE = DotName.createSimple(MapKeyType.class.getName());
/* 121:149 */   public static final DotName META_VALUE = DotName.createSimple(MetaValue.class.getName());
/* 122:150 */   public static final DotName NAMED_NATIVE_QUERIES = DotName.createSimple(NamedNativeQueries.class.getName());
/* 123:151 */   public static final DotName NAMED_NATIVE_QUERY = DotName.createSimple(NamedNativeQuery.class.getName());
/* 124:152 */   public static final DotName NAMED_QUERIES = DotName.createSimple(NamedQueries.class.getName());
/* 125:153 */   public static final DotName NAMED_QUERY = DotName.createSimple(NamedQuery.class.getName());
/* 126:154 */   public static final DotName NATURAL_ID = DotName.createSimple(NaturalId.class.getName());
/* 127:155 */   public static final DotName NOT_FOUND = DotName.createSimple(NotFound.class.getName());
/* 128:156 */   public static final DotName ON_DELETE = DotName.createSimple(OnDelete.class.getName());
/* 129:157 */   public static final DotName OPTIMISTIC_LOCK = DotName.createSimple(OptimisticLock.class.getName());
/* 130:158 */   public static final DotName ORDER_BY = DotName.createSimple(OrderBy.class.getName());
/* 131:159 */   public static final DotName PARAM_DEF = DotName.createSimple(ParamDef.class.getName());
/* 132:160 */   public static final DotName PARAMETER = DotName.createSimple(Parameter.class.getName());
/* 133:161 */   public static final DotName PARENT = DotName.createSimple(Parent.class.getName());
/* 134:162 */   public static final DotName PERSISTER = DotName.createSimple(Persister.class.getName());
/* 135:163 */   public static final DotName PROXY = DotName.createSimple(Proxy.class.getName());
/* 136:164 */   public static final DotName ROW_ID = DotName.createSimple(RowId.class.getName());
/* 137:165 */   public static final DotName SORT = DotName.createSimple(Sort.class.getName());
/* 138:166 */   public static final DotName SOURCE = DotName.createSimple(Source.class.getName());
/* 139:167 */   public static final DotName SQL_DELETE = DotName.createSimple(SQLDelete.class.getName());
/* 140:168 */   public static final DotName SQL_DELETE_ALL = DotName.createSimple(SQLDeleteAll.class.getName());
/* 141:169 */   public static final DotName SQL_INSERT = DotName.createSimple(SQLInsert.class.getName());
/* 142:170 */   public static final DotName SQL_UPDATE = DotName.createSimple(SQLUpdate.class.getName());
/* 143:171 */   public static final DotName SUB_SELECT = DotName.createSimple(Subselect.class.getName());
/* 144:172 */   public static final DotName SYNCHRONIZE = DotName.createSimple(Synchronize.class.getName());
/* 145:173 */   public static final DotName TABLE = DotName.createSimple(Table.class.getName());
/* 146:174 */   public static final DotName TABLES = DotName.createSimple(Tables.class.getName());
/* 147:175 */   public static final DotName TARGET = DotName.createSimple(Target.class.getName());
/* 148:176 */   public static final DotName TUPLIZER = DotName.createSimple(Tuplizer.class.getName());
/* 149:177 */   public static final DotName TUPLIZERS = DotName.createSimple(Tuplizers.class.getName());
/* 150:178 */   public static final DotName TYPE = DotName.createSimple(Type.class.getName());
/* 151:179 */   public static final DotName TYPE_DEF = DotName.createSimple(TypeDef.class.getName());
/* 152:180 */   public static final DotName TYPE_DEFS = DotName.createSimple(TypeDefs.class.getName());
/* 153:181 */   public static final DotName WHERE = DotName.createSimple(Where.class.getName());
/* 154:182 */   public static final DotName WHERE_JOIN_TABLE = DotName.createSimple(WhereJoinTable.class.getName());
/* 155:    */ }


/* Location:           G:\ParasiteTrade\Parasite_20150226.jar
 * Qualified Name:     org.hibernate.metamodel.source.annotations.HibernateDotNames
 * JD-Core Version:    0.7.0.1
 */