/*   1:    */ package org.hibernate.metamodel.source.annotations;
/*   2:    */ 
/*   3:    */ import javax.persistence.Access;
/*   4:    */ import javax.persistence.AccessType;
/*   5:    */ import javax.persistence.AssociationOverride;
/*   6:    */ import javax.persistence.AssociationOverrides;
/*   7:    */ import javax.persistence.AttributeOverride;
/*   8:    */ import javax.persistence.AttributeOverrides;
/*   9:    */ import javax.persistence.Basic;
/*  10:    */ import javax.persistence.Cacheable;
/*  11:    */ import javax.persistence.CascadeType;
/*  12:    */ import javax.persistence.CollectionTable;
/*  13:    */ import javax.persistence.Column;
/*  14:    */ import javax.persistence.ColumnResult;
/*  15:    */ import javax.persistence.DiscriminatorColumn;
/*  16:    */ import javax.persistence.DiscriminatorType;
/*  17:    */ import javax.persistence.DiscriminatorValue;
/*  18:    */ import javax.persistence.ElementCollection;
/*  19:    */ import javax.persistence.Embeddable;
/*  20:    */ import javax.persistence.Embedded;
/*  21:    */ import javax.persistence.EmbeddedId;
/*  22:    */ import javax.persistence.Entity;
/*  23:    */ import javax.persistence.EntityListeners;
/*  24:    */ import javax.persistence.EntityResult;
/*  25:    */ import javax.persistence.EnumType;
/*  26:    */ import javax.persistence.Enumerated;
/*  27:    */ import javax.persistence.ExcludeDefaultListeners;
/*  28:    */ import javax.persistence.ExcludeSuperclassListeners;
/*  29:    */ import javax.persistence.FetchType;
/*  30:    */ import javax.persistence.FieldResult;
/*  31:    */ import javax.persistence.GeneratedValue;
/*  32:    */ import javax.persistence.GenerationType;
/*  33:    */ import javax.persistence.Id;
/*  34:    */ import javax.persistence.IdClass;
/*  35:    */ import javax.persistence.Inheritance;
/*  36:    */ import javax.persistence.InheritanceType;
/*  37:    */ import javax.persistence.JoinColumn;
/*  38:    */ import javax.persistence.JoinColumns;
/*  39:    */ import javax.persistence.JoinTable;
/*  40:    */ import javax.persistence.Lob;
/*  41:    */ import javax.persistence.LockModeType;
/*  42:    */ import javax.persistence.ManyToMany;
/*  43:    */ import javax.persistence.ManyToOne;
/*  44:    */ import javax.persistence.MapKey;
/*  45:    */ import javax.persistence.MapKeyClass;
/*  46:    */ import javax.persistence.MapKeyColumn;
/*  47:    */ import javax.persistence.MapKeyEnumerated;
/*  48:    */ import javax.persistence.MapKeyJoinColumn;
/*  49:    */ import javax.persistence.MapKeyJoinColumns;
/*  50:    */ import javax.persistence.MapKeyTemporal;
/*  51:    */ import javax.persistence.MappedSuperclass;
/*  52:    */ import javax.persistence.MapsId;
/*  53:    */ import javax.persistence.NamedNativeQueries;
/*  54:    */ import javax.persistence.NamedNativeQuery;
/*  55:    */ import javax.persistence.NamedQueries;
/*  56:    */ import javax.persistence.NamedQuery;
/*  57:    */ import javax.persistence.OneToMany;
/*  58:    */ import javax.persistence.OneToOne;
/*  59:    */ import javax.persistence.OrderBy;
/*  60:    */ import javax.persistence.OrderColumn;
/*  61:    */ import javax.persistence.PersistenceContext;
/*  62:    */ import javax.persistence.PersistenceContexts;
/*  63:    */ import javax.persistence.PersistenceProperty;
/*  64:    */ import javax.persistence.PersistenceUnit;
/*  65:    */ import javax.persistence.PersistenceUnits;
/*  66:    */ import javax.persistence.PostLoad;
/*  67:    */ import javax.persistence.PostPersist;
/*  68:    */ import javax.persistence.PostRemove;
/*  69:    */ import javax.persistence.PostUpdate;
/*  70:    */ import javax.persistence.PrePersist;
/*  71:    */ import javax.persistence.PreRemove;
/*  72:    */ import javax.persistence.PreUpdate;
/*  73:    */ import javax.persistence.PrimaryKeyJoinColumn;
/*  74:    */ import javax.persistence.PrimaryKeyJoinColumns;
/*  75:    */ import javax.persistence.QueryHint;
/*  76:    */ import javax.persistence.SecondaryTable;
/*  77:    */ import javax.persistence.SecondaryTables;
/*  78:    */ import javax.persistence.SequenceGenerator;
/*  79:    */ import javax.persistence.SqlResultSetMapping;
/*  80:    */ import javax.persistence.SqlResultSetMappings;
/*  81:    */ import javax.persistence.Table;
/*  82:    */ import javax.persistence.TableGenerator;
/*  83:    */ import javax.persistence.Temporal;
/*  84:    */ import javax.persistence.TemporalType;
/*  85:    */ import javax.persistence.Transient;
/*  86:    */ import javax.persistence.UniqueConstraint;
/*  87:    */ import javax.persistence.Version;
/*  88:    */ import org.jboss.jandex.DotName;
/*  89:    */ 
/*  90:    */ public abstract interface JPADotNames
/*  91:    */ {
/*  92:120 */   public static final DotName ACCESS = DotName.createSimple(Access.class.getName());
/*  93:121 */   public static final DotName ACCESS_TYPE = DotName.createSimple(AccessType.class.getName());
/*  94:122 */   public static final DotName ASSOCIATION_OVERRIDE = DotName.createSimple(AssociationOverride.class.getName());
/*  95:123 */   public static final DotName ASSOCIATION_OVERRIDES = DotName.createSimple(AssociationOverrides.class.getName());
/*  96:124 */   public static final DotName ATTRIBUTE_OVERRIDE = DotName.createSimple(AttributeOverride.class.getName());
/*  97:125 */   public static final DotName ATTRIBUTE_OVERRIDES = DotName.createSimple(AttributeOverrides.class.getName());
/*  98:126 */   public static final DotName BASIC = DotName.createSimple(Basic.class.getName());
/*  99:127 */   public static final DotName CACHEABLE = DotName.createSimple(Cacheable.class.getName());
/* 100:128 */   public static final DotName CASCADE_TYPE = DotName.createSimple(CascadeType.class.getName());
/* 101:129 */   public static final DotName COLLECTION_TABLE = DotName.createSimple(CollectionTable.class.getName());
/* 102:130 */   public static final DotName COLUMN = DotName.createSimple(Column.class.getName());
/* 103:131 */   public static final DotName COLUMN_RESULT = DotName.createSimple(ColumnResult.class.getName());
/* 104:132 */   public static final DotName DISCRIMINATOR_COLUMN = DotName.createSimple(DiscriminatorColumn.class.getName());
/* 105:133 */   public static final DotName DISCRIMINATOR_TYPE = DotName.createSimple(DiscriminatorType.class.getName());
/* 106:134 */   public static final DotName DISCRIMINATOR_VALUE = DotName.createSimple(DiscriminatorValue.class.getName());
/* 107:135 */   public static final DotName ELEMENT_COLLECTION = DotName.createSimple(ElementCollection.class.getName());
/* 108:136 */   public static final DotName EMBEDDABLE = DotName.createSimple(Embeddable.class.getName());
/* 109:137 */   public static final DotName EMBEDDED = DotName.createSimple(Embedded.class.getName());
/* 110:138 */   public static final DotName EMBEDDED_ID = DotName.createSimple(EmbeddedId.class.getName());
/* 111:139 */   public static final DotName ENTITY = DotName.createSimple(Entity.class.getName());
/* 112:140 */   public static final DotName ENTITY_LISTENERS = DotName.createSimple(EntityListeners.class.getName());
/* 113:141 */   public static final DotName ENTITY_RESULT = DotName.createSimple(EntityResult.class.getName());
/* 114:142 */   public static final DotName ENUMERATED = DotName.createSimple(Enumerated.class.getName());
/* 115:143 */   public static final DotName ENUM_TYPE = DotName.createSimple(EnumType.class.getName());
/* 116:144 */   public static final DotName EXCLUDE_DEFAULT_LISTENERS = DotName.createSimple(ExcludeDefaultListeners.class.getName());
/* 117:145 */   public static final DotName EXCLUDE_SUPERCLASS_LISTENERS = DotName.createSimple(ExcludeSuperclassListeners.class.getName());
/* 118:146 */   public static final DotName FETCH_TYPE = DotName.createSimple(FetchType.class.getName());
/* 119:147 */   public static final DotName FIELD_RESULT = DotName.createSimple(FieldResult.class.getName());
/* 120:148 */   public static final DotName GENERATION_TYPE = DotName.createSimple(GenerationType.class.getName());
/* 121:149 */   public static final DotName GENERATED_VALUE = DotName.createSimple(GeneratedValue.class.getName());
/* 122:150 */   public static final DotName ID = DotName.createSimple(Id.class.getName());
/* 123:151 */   public static final DotName ID_CLASS = DotName.createSimple(IdClass.class.getName());
/* 124:152 */   public static final DotName INHERITANCE_TYPE = DotName.createSimple(InheritanceType.class.getName());
/* 125:153 */   public static final DotName JOIN_COLUMN = DotName.createSimple(JoinColumn.class.getName());
/* 126:154 */   public static final DotName INHERITANCE = DotName.createSimple(Inheritance.class.getName());
/* 127:155 */   public static final DotName JOIN_COLUMNS = DotName.createSimple(JoinColumns.class.getName());
/* 128:156 */   public static final DotName JOIN_TABLE = DotName.createSimple(JoinTable.class.getName());
/* 129:157 */   public static final DotName LOB = DotName.createSimple(Lob.class.getName());
/* 130:158 */   public static final DotName LOCK_MODE_TYPE = DotName.createSimple(LockModeType.class.getName());
/* 131:159 */   public static final DotName MANY_TO_MANY = DotName.createSimple(ManyToMany.class.getName());
/* 132:160 */   public static final DotName MANY_TO_ONE = DotName.createSimple(ManyToOne.class.getName());
/* 133:161 */   public static final DotName MAP_KEY = DotName.createSimple(MapKey.class.getName());
/* 134:162 */   public static final DotName MAP_KEY_CLASS = DotName.createSimple(MapKeyClass.class.getName());
/* 135:163 */   public static final DotName MAP_KEY_COLUMN = DotName.createSimple(MapKeyColumn.class.getName());
/* 136:164 */   public static final DotName MAP_KEY_ENUMERATED = DotName.createSimple(MapKeyEnumerated.class.getName());
/* 137:165 */   public static final DotName MAP_KEY_JOIN_COLUMN = DotName.createSimple(MapKeyJoinColumn.class.getName());
/* 138:166 */   public static final DotName MAP_KEY_JOIN_COLUMNS = DotName.createSimple(MapKeyJoinColumns.class.getName());
/* 139:167 */   public static final DotName MAP_KEY_TEMPORAL = DotName.createSimple(MapKeyTemporal.class.getName());
/* 140:168 */   public static final DotName MAPPED_SUPERCLASS = DotName.createSimple(MappedSuperclass.class.getName());
/* 141:169 */   public static final DotName MAPS_ID = DotName.createSimple(MapsId.class.getName());
/* 142:170 */   public static final DotName NAMED_NATIVE_QUERIES = DotName.createSimple(NamedNativeQueries.class.getName());
/* 143:171 */   public static final DotName NAMED_NATIVE_QUERY = DotName.createSimple(NamedNativeQuery.class.getName());
/* 144:172 */   public static final DotName NAMED_QUERIES = DotName.createSimple(NamedQueries.class.getName());
/* 145:173 */   public static final DotName NAMED_QUERY = DotName.createSimple(NamedQuery.class.getName());
/* 146:174 */   public static final DotName ONE_TO_MANY = DotName.createSimple(OneToMany.class.getName());
/* 147:175 */   public static final DotName ONE_TO_ONE = DotName.createSimple(OneToOne.class.getName());
/* 148:176 */   public static final DotName ORDER_BY = DotName.createSimple(OrderBy.class.getName());
/* 149:177 */   public static final DotName ORDER_COLUMN = DotName.createSimple(OrderColumn.class.getName());
/* 150:178 */   public static final DotName PERSISTENCE_CONTEXT = DotName.createSimple(PersistenceContext.class.getName());
/* 151:179 */   public static final DotName PERSISTENCE_CONTEXTS = DotName.createSimple(PersistenceContexts.class.getName());
/* 152:180 */   public static final DotName PERSISTENCE_PROPERTY = DotName.createSimple(PersistenceProperty.class.getName());
/* 153:181 */   public static final DotName PERSISTENCE_UNIT = DotName.createSimple(PersistenceUnit.class.getName());
/* 154:182 */   public static final DotName PERSISTENCE_UNITS = DotName.createSimple(PersistenceUnits.class.getName());
/* 155:183 */   public static final DotName POST_LOAD = DotName.createSimple(PostLoad.class.getName());
/* 156:184 */   public static final DotName POST_PERSIST = DotName.createSimple(PostPersist.class.getName());
/* 157:185 */   public static final DotName POST_REMOVE = DotName.createSimple(PostRemove.class.getName());
/* 158:186 */   public static final DotName POST_UPDATE = DotName.createSimple(PostUpdate.class.getName());
/* 159:187 */   public static final DotName PRE_PERSIST = DotName.createSimple(PrePersist.class.getName());
/* 160:188 */   public static final DotName PRE_REMOVE = DotName.createSimple(PreRemove.class.getName());
/* 161:189 */   public static final DotName PRE_UPDATE = DotName.createSimple(PreUpdate.class.getName());
/* 162:190 */   public static final DotName PRIMARY_KEY_JOIN_COLUMN = DotName.createSimple(PrimaryKeyJoinColumn.class.getName());
/* 163:191 */   public static final DotName PRIMARY_KEY_JOIN_COLUMNS = DotName.createSimple(PrimaryKeyJoinColumns.class.getName());
/* 164:192 */   public static final DotName QUERY_HINT = DotName.createSimple(QueryHint.class.getName());
/* 165:193 */   public static final DotName SECONDARY_TABLE = DotName.createSimple(SecondaryTable.class.getName());
/* 166:194 */   public static final DotName SECONDARY_TABLES = DotName.createSimple(SecondaryTables.class.getName());
/* 167:195 */   public static final DotName SEQUENCE_GENERATOR = DotName.createSimple(SequenceGenerator.class.getName());
/* 168:196 */   public static final DotName SQL_RESULT_SET_MAPPING = DotName.createSimple(SqlResultSetMapping.class.getName());
/* 169:197 */   public static final DotName SQL_RESULT_SET_MAPPINGS = DotName.createSimple(SqlResultSetMappings.class.getName());
/* 170:198 */   public static final DotName TABLE = DotName.createSimple(Table.class.getName());
/* 171:199 */   public static final DotName TABLE_GENERATOR = DotName.createSimple(TableGenerator.class.getName());
/* 172:200 */   public static final DotName TEMPORAL = DotName.createSimple(Temporal.class.getName());
/* 173:201 */   public static final DotName TEMPORAL_TYPE = DotName.createSimple(TemporalType.class.getName());
/* 174:202 */   public static final DotName TRANSIENT = DotName.createSimple(Transient.class.getName());
/* 175:203 */   public static final DotName UNIQUE_CONSTRAINT = DotName.createSimple(UniqueConstraint.class.getName());
/* 176:204 */   public static final DotName VERSION = DotName.createSimple(Version.class.getName());
/* 177:    */ }


/* Location:           G:\ParasiteTrade\Parasite_20150226.jar
 * Qualified Name:     org.hibernate.metamodel.source.annotations.JPADotNames
 * JD-Core Version:    0.7.0.1
 */